name: Deploy Spring Boot to AWS

on:
  push:
    branches: [ main ] # main 브랜치에 push 될 때마다 이 워크플로우가 실행됨

jobs:
  build-and-upload: # 작업(Job) 이름

    runs-on: ubuntu-latest # GitHub에서 제공하는 최신 Ubuntu 가상환경에서 실행

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # 현재 리포지토리의 코드를 체크아웃 (가져오기) 해서 다음 단계에서 사용할 수 있게 함

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # OpenJDK 배포판 중 하나인 Temurin 사용
          java-version: '17'      # Java 17 버전 설치

      - name: Build with Gradle
        run: ./gradlew clean build
        # Gradle 빌드 실행 (clean: 기존 빌드 파일 삭제, build: 새로 빌드 생성)
        # 결과물은 보통 build/libs 디렉토리에 생성됨

      - name: Upload jar to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl private --follow-symlinks
          # --acl private: S3 객체를 비공개로 업로드
          # --follow-symlinks: 심볼릭 링크도 따라가서 업로드
        env:
          AWS_S3_BUCKET: ${{ secrets.S3_BUCKET_NAME }}
          # S3 버킷 이름 (예: my-app-deploy-bucket) — GitHub Secrets에 저장되어 있어야 함

          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # AWS IAM 사용자의 액세스 키 ID (보안상 Secrets에 저장)

          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # AWS IAM 사용자의 비밀 액세스 키 (보안상 Secrets에 저장)

          AWS_REGION: ${{ secrets.AWS_REGION }}
          # S3 버킷이 있는 AWS 리전 (예: ap-northeast-2)

          SOURCE_DIR: build/libs
          # S3에 업로드할 파일들이 있는 디렉토리 (예: 빌드된 .jar 파일)
