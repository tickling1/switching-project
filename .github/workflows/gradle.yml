name: Deploy Spring Boot to AWS

on:
  push:
    branches: [ main ] # main 브랜치에 push 될 때마다 이 워크플로우가 실행됨

jobs:
  build-and-upload:
    runs-on: ubuntu-latest # GitHub에서 제공하는 최신 Ubuntu 가상환경에서 실행

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # 현재 리포지토리의 코드를 체크아웃 (가져오기)

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
        # Java 17 및 Temurin JDK 설치

      - name: Give gradlew permission
        run: chmod +x ./gradlew
        # gradlew 실행 권한 부여 (리눅스에서는 필수)

      - name: Build with Gradle
        run: ./gradlew clean build
        # 프로젝트 빌드 실행. 결과물은 보통 build/libs 폴더에 생성됨

      - name: Prepare deployment package # ✅ 추가된 부분 시작
        run: |
          mkdir -p deploy-package                   # 배포에 필요한 파일을 담을 폴더 생성
          cp build/libs/*.jar deploy-package/app.jar  # 생성된 JAR 파일을 복사하고 이름을 app.jar로 고정
          cp appspec.yml deploy-package/            # appspec.yml 파일도 복사
          cp deploy.sh deploy-package/              # deploy.sh 스크립트도 복사
        # ✅ CodeDeploy가 작동하려면 appspec.yml과 deploy.sh가 함께 있어야 하므로
        #    이 3가지를 하나의 폴더에 묶어 업로드할 준비를 함

      - name: Upload to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl private --follow-symlinks
        env:
          AWS_S3_BUCKET: switching-bucket-202504   # 너의 S3 버킷 이름
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-northeast-2               # 서울 리전 (예시)
          SOURCE_DIR: deploy-package               # ✅ 앞에서 만든 폴더를 S3에 업로드
        # ✅ 이전에는 app.jar만 업로드했지만, 이제는 appspec.yml과 deploy.sh도 포함됨